name: 'Terraform EC2 Infrastructure'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    # inputs:
    #   action:
    #     description: 'Action to perform (apply or destroy)'
    #     required: true
    #     default: 'apply'
    #     type: choice
    #     options:
    #       - apply
    #       - destroy

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  S3_BUCKET: ${{ vars.BUCKET }}
  TF_VAR_key_name: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  terraform:
    name: 'Deploy Infra with Terraform on AWS'
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$S3_BUCKET" -backend-config="key=terraform.tfstate" -backend-config="region=$AWS_REGION"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Setup SSH Key
        run: |
          KEY_NAME=${{ env.TF_VAR_key_name }}
          KEY_EXISTS=$(aws ec2 describe-key-pairs --key-names $KEY_NAME --query 'KeyPairs[*].KeyName' --output text --region $AWS_REGION || echo "")

          if [ -z "$KEY_EXISTS" ] && [ -n "${{ secrets.SSH_PUBLIC_KEY }}" ]; then
            echo "Creating SSH key pair $KEY_NAME..."
            aws ec2 import-key-pair --key-name $KEY_NAME --public-key-material "${{ secrets.SSH_PUBLIC_KEY }}" --region $AWS_REGION
            echo "SSH key pair created successfully"
          fi

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -input=false tfplan

      - name: Output EC2 Information
        if: steps.apply.outcome == 'success'
        run: |
          echo "============================================================"
          echo "EC2 INSTANCE CREATED SUCCESSFULLY"
          echo "============================================================"
          echo "EC2 Public IP: $(terraform output -raw ec2_public_ip)"
          echo "Frontend URL: $(terraform output -raw frontend_url)"
          echo "Backend URL: $(terraform output -raw backend_url)"
          echo "============================================================"
          echo "IMPORTANT: Add the EC2 Public IP to GitHub Secrets as EC2_HOST"
          echo "============================================================"

  terraform-destroy:
    name: 'Destroy Infra on AWS'
    runs-on: ubuntu-latest

    if: github.event_name == 'workflow_dispatch'
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$S3_BUCKET" -backend-config="key=terraform.tfstate" -backend-config="region=$AWS_REGION"

      - name: Terraform Destroy
        id: destroy
        run: |
          terraform destroy -auto-approve -input=false

          if [ $? -eq 0 ]; then
            echo "Infrastructure destroyed successfully, deleting state file..."
            aws s3 rm s3://$S3_BUCKET/terraform.tfstate
            echo "Terraform state file deleted successfully"
          else
            echo "Infrastructure destruction failed, keeping state file"
            exit 1
          fi
